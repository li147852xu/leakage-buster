#!/usr/bin/env python3\n"""\nLeakage Buster 修复建议脚本\n自动生成于: 2025-09-13T07:16:08.606984\n"""\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import GroupKFold, TimeSeriesSplit\n\ndef apply_fixes(df: pd.DataFrame, target: str, time_col: str = None):\n    """应用修复建议"""\n    df_fixed = df.copy()\n\n    # 1. 删除高危泄漏列\n    drop_cols = ['target_enc_feature']\n    if drop_cols:\n        print(f'删除高危泄漏列: {drop_cols}')\n        df_fixed = df_fixed.drop(columns=drop_cols)\n\n    # 2. 处理目标编码特征\n    te_cols = []\n    if te_cols:\n        print(f'发现疑似目标编码特征: {te_cols}')\n        print('建议：在CV内重新计算目标编码，避免使用全量数据')\n\n    # 3. 处理时间窗口特征\n    window_cols = []\n    if window_cols:\n        print(f'发现疑似全量统计特征: {window_cols}')\n        print('建议：改为仅使用历史窗口数据的统计')\n\n    # 4. 分组列建议\n    group_cols = []\n    if group_cols:\n        print(f'建议使用GroupKFold的列: {group_cols}')\n\n    return df_fixed\n\ndef get_recommended_cv_splitter(df: pd.DataFrame, target: str, time_col: str = None):\n    """获取推荐的CV分割器"""\n    if time_col and time_col in df.columns:\n        return TimeSeriesSplit(n_splits=5)\n    elif group_cols:\n        return GroupKFold(n_splits=5)\n    else:\n        from sklearn.model_selection import KFold\n        return KFold(n_splits=5, shuffle=True, random_state=42)\n\nif __name__ == '__main__':\n    # 示例用法\n    # df = pd.read_csv('your_data.csv')\n    # df_fixed = apply_fixes(df, 'target_column')\n    # cv_splitter = get_recommended_cv_splitter(df, 'target_column')\n    pass