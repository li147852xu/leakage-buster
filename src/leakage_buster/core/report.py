
import os, json, datetime as dt
from typing import Dict
from jinja2 import Environment, FileSystemLoader, select_autoescape

def render_report(results: Dict, meta: Dict, out_dir: str):
    env = Environment(loader=FileSystemLoader(searchpath=os.path.join(os.path.dirname(__file__), "..", "templates")),
                      autoescape=select_autoescape())
    tpl = env.get_template("report.html.j2")
    html = tpl.render(results=results, meta=meta, now=dt.datetime.now().isoformat(timespec="seconds"))
    os.makedirs(out_dir, exist_ok=True)
    out_path = os.path.join(out_dir, "report.html")
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(html)
    return out_path

def write_fix_script(results: Dict, out_dir: str):
    os.makedirs(out_dir, exist_ok=True)
    path = os.path.join(out_dir, "fix_transforms.py")
    suggestions = []
    for r in results.get("risks", []):
        if r["name"].startswith("Target leakage"):
            cols = list(r["evidence"].get("columns", {}).keys()) if isinstance(r["evidence"].get("columns"), dict) else []
            suggestions.append(f"# 建议：删除或在CV内重算以下疑似泄漏列：{cols}")
        if r["name"].startswith("KFold leakage"):
            candidates = [c["column"] for c in r["evidence"].get("candidates", [])]
            suggestions.append(f"# 建议：以以下列之一作为 groups，使用 GroupKFold：{candidates}")
    content = """# Auto-generated by leakage-buster

def apply_suggestions(df):
    # TODO: 根据建议处理疑似泄漏特征
    return df

def make_group_kfold_groups(df):
    # TODO: 返回一列 groups，供 GroupKFold 使用
    return None
"""
    content += "\n".join(suggestions) + "\n"
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    return path

def write_meta(meta: Dict, out_dir: str):
    os.makedirs(out_dir, exist_ok=True)
    path = os.path.join(out_dir, "meta.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(meta, f, ensure_ascii=False, indent=2)
    return path

