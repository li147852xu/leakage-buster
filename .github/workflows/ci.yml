
name: Leakage Buster CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src/leakage_buster --cov-report=xml --tb=short
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  leakage-audit:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install leakage-buster
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Run leakage audit on examples
      run: |
        # 基本检测
        leakage-buster run --train examples/synth_train.csv --target y --time-col date --out runs/ci_basic
        
        # 检查退出码
        echo "Basic audit exit code: $?"
        
        # 带策略审计
        leakage-buster run --train examples/group_cv.csv --target y --time-col date --out runs/ci_policy --cv-policy-file conf/cv_policy.yaml
        
        # 带auto-fix plan
        leakage-buster run --train examples/homecredit_te.csv --target y --time-col date --out runs/ci_plan --auto-fix plan --fix-json runs/ci_plan/fix_plan.json
        
        # 带auto-fix apply
        leakage-buster run --train examples/fraud_rolling.csv --target y --time-col ts --out runs/ci_apply --auto-fix apply --fixed-train runs/ci_apply/fixed_train.csv
    
    - name: Check for high leakage (should fail CI)
      run: |
        # 创建一个有高泄漏的测试数据
        python -c "
        import pandas as pd
        import numpy as np
        
        # 创建高泄漏数据
        df = pd.DataFrame({
            'amount': np.random.normal(100, 20, 100),
            'leak_col': np.random.normal(0, 0.01, 100),  # 几乎完美的预测
            'target': np.random.binomial(1, 0.3, 100)
        })
        # 让leak_col几乎完美预测target
        df['leak_col'] = df['target'] + np.random.normal(0, 0.01, 100)
        
        df.to_csv('high_leakage_test.csv', index=False)
        "
        
        # 运行检测，应该返回高危泄漏退出码
        leakage-buster run --train high_leakage_test.csv --target target --out runs/ci_high_leakage || true
        
        # 检查退出码
        echo "High leakage audit exit code: $?"
        
        # 如果检测到高危泄漏，CI应该失败
        if [ $? -eq 3 ]; then
          echo "❌ High leakage detected! CI should fail."
          exit 1
        else
          echo "✅ No high leakage detected."
        fi
    
    - name: Upload audit reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: audit-reports
        path: runs/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r src/leakage_buster/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7

  documentation:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        # 这里可以添加文档构建步骤
        echo "Documentation build would go here"
    
    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Documentation deployment would go here"

